filter {
  if [type] == "nginx-access" {
    grok {
      patterns_dir => ["/opt/logstash/patterns/"]
      match => { "message" => "%{NGINXACCESS}" }
    } 
    geoip {
        source => "clientip"
        target => "geoip"
        database => "/etc/logstash/GeoLiteCity.dat"
        add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
        add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }
    mutate {
      convert => [ "[geoip][coordinates][bytes_sent]", "float"]
    }
  } 
    
  if [type] == "nginx-access-cdn" {
    grok {
      patterns_dir => ["/opt/logstash/patterns/"]
      match => { "message" => "%{NGINXACCESSCDN}" }
    }
    geoip {
      source => "remote_addr"
      target => "geoip"
      database => "/etc/logstash/GeoLiteCity.dat"
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }
    mutate {
      convert => [ "[geoip][coordinates]", "float"]
    }
  }
    
  if [type] == "nginx-error" {
    grok {
     	match => [ "message" , "(?<timestamp>%{YEAR}[./-]%{MONTHNUM}[./-]%{MONTHDAY}[- ]%{TIME}) \[%{LOGLEVEL:severity}\] %{POSINT:pid}#%{NUMBER}: %{GREEDYDATA:errormessage}(?:, client: (?<client>%{IP}|%{HOSTNAME}))(?:, server: %{IPORHOST:server})(?:, request: %{QS:request})?(?:, upstream: \"%{URI:upstream}\")?(?:, host: %{QS:host})?(?:, referrer: \"%{URI:referrer}\")"]
    	overwrite => [ "message" ]
    }
    geoip {
        source => "client"
        target => "geoip"
        database => "/etc/logstash/GeoLiteCity.dat"
        add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
        add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }
    mutate {
      convert => [ "[geoip][coordinates]", "float"]
    }
#    grok {
#      patterns_dir => ["/opt/logstash/patterns/"]
#      match => { "message" => "%{NGINX_ERROR}" }
#    }
  }
}
